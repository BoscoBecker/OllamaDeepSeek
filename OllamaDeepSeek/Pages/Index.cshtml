@page
@model ChatRequest;

@{
    ViewBag.Title = "DeepSeek chat with Ollama";
    Layout = "_Layout";
}
<div class="chat-container">
    <div class="chat-box" id="chatBox">
        @foreach (var message in Model.Messages){
            <div class="@(message.role == "user" ? "message user" : "message assistant")">
                <i>@message.content</i>
            </div>
        }
    </div>
    <form class="chat-form" id="chatForm" method="get">
        <input type="text" class="form-control" id="userMessage" placeholder="Enter your message..." required />
        <button type="submit" id="buttonSend" class="btn btn-primary">Enviar</button>
    </form>
</div>

<style>    
    .chat-box { height: 400px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; }
    .message { padding: 5px; margin: 5px; border-radius: 5px; }
    .user { background: #007bff; color: white; text-align: right; }    
    .chat-form { display: flex; margin-top: 10px; }
    .chat-form input { flex: 1; padding: 5px; }
    .chat-form button { padding: 5px 10px; }
</style>
<script>
    document.getElementById("chatForm").addEventListener("submit", async function (e) { e.preventDefault();
        let submitButton = document.getElementById("buttonSend");
            submitButton.disabled = true;
            
        let inputField = document.getElementById("userMessage");
        let message = inputField.value.trim();
        if (!message) return;

        let chatBox = document.getElementById("chatBox");
        let data = new Date();
            data = data.toLocaleString("en-US", {
            month: "2-digit",
            day: "2-digit",
            year: "numeric",
            hour: "2-digit",
            minute: "2-digit",
            second: "2-digit",
            hour12: false
        }).replace(",", " -");

        chatBox.innerHTML += `<div class="message user"> You: <i>${data}</i> ${message}</div>`;
        inputField.value = "";
        chatBox.scrollTop = chatBox.scrollHeight;

        let assistantMessage = document.createElement("div");
        assistantMessage.className = "message assistant";
        assistantMessage.innerHTML = 
            `<span class="response-content"></span> 
            <span class="spinner-container">
            <div class="spinner-grow text-primary" role="status">
            <span class="visually-hidden"></span>
            </div>
            </span>`;
        chatBox.appendChild(assistantMessage);
        chatBox.scrollTop = chatBox.scrollHeight;

        try {
            const url = new URL('/Chat/GetChatResponse', window.location.origin);
                  url.searchParams.append('message', message);

            const response = await fetch(url, {
                method: 'GET',
                headers: {'Accept': 'text/event-stream'}
            });

            if (!response.ok) throw new Error("Error from json response!");            
            let responseData = new Date();
            responseData = responseData.toLocaleString("en-US", {
                month: "2-digit",
                day: "2-digit",
                year: "numeric",
                hour: "2-digit",
                minute: "2-digit",
                second: "2-digit",
                hour12: false
            }).replace(",", " -");
            
            const reader = response.body.getReader();
            const decoder = new TextDecoder();
            const responseContent = assistantMessage.querySelector('.response-content');
            let dataExibida = false;
            while (true) {
                const { value, done } = await reader.read();
                if (done) break; 
                let chunk = decoder.decode(value, { stream: true });
                    chunk.split('\n').forEach(line => {
                    if (line.trim() === "") return;
                    try {
                        const data = JSON.parse(line);
                        const content = data.message?.content || "";
                        if (!dataExibida) {
                            let responseData = new Date();
                                responseData = responseData.toLocaleString("en-US", {
                                month: "2-digit",
                                day: "2-digit",
                                year: "numeric",
                                hour: "2-digit",
                                minute: "2-digit",
                                second: "2-digit",
                                hour12: false
                            }).replace(",", " -");
                            responseContent.innerHTML += `DeepSeek: <i>${responseData}</i> : ${content}`;
                            dataExibida = true;
                        }  else {
                           responseContent.innerHTML += content;
                        }              
                       chatBox.scrollTop = chatBox.scrollHeight;
                    } catch (error) {
                        console.error("Error to process JSON:", error);
                    }
                });
           }
            const spinnerContainer = assistantMessage.querySelector('.spinner-container');
            spinnerContainer.style.display = 'none';
            submitButton.disabled = false;
        } catch (error) {
            submitButton.disabled = false;
            console.error("Erro:", error);
            const spinnerContainer = assistantMessage.querySelector('.spinner-container');
            spinnerContainer.style.display = 'none';
            assistantMessage.innerHTML = "Error to to get data whit the API.";
        }
    });
</script>